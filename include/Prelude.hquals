//BOT: Do not delete EVER!

qualif Bot(v:@(0))    : (0 = 1)
qualif Bot(v:obj)     : (0 = 1)
qualif Bot(v:a)       : (0 = 1)
qualif Bot(v:bool)    : (0 = 1)
qualif Bot(v:int)     : (0 = 1)

//qualif NonNull(v: [a])        : (? (nonnull([v])))
//qualif Null(v: [a])           : (~ (? (nonnull([v]))))
//qualif EqNull(v:Bool, ~A: [a]): (Prop(v) <=> (? (nonnull([~A]))))

// qualif IsEmp(v:GHC.Types.Bool, ~A: [a]) : (Prop(v) <=> len([~A]) [ > ;  = ] 0)
// qualif ListZ(v: [a])          : len([v]) [ = ; >= ; > ] 0 
// qualif CmpLen(v:[a], ~A:[b])  : len([v]) [= ; >=; >; <=; <] len([~A]) 
// qualif EqLen(v:int, ~A: [a])  : v = len([~A]) 
// qualif LenEq(v:[a], ~A: int)  : ~A = len([v]) 
// qualif LenAcc(v:int, ~A:[a], ~B: int): v = len([~A]) + ~B
// qualif LenDiff(v:[a], ~A:int): len([v]) = (~A [ +; - ] 1)

qualif IsEmp(v:GHC.Types.Bool, xs: [a]) : (Prop(v) <=> len([xs]) > 0)
qualif IsEmp(v:GHC.Types.Bool, xs: [a]) : (Prop(v) <=> len([xs]) = 0)

qualif ListZ(v: [a])          : (len([v]) =  0) 
qualif ListZ(v: [a])          : (len([v]) >= 0) 
qualif ListZ(v: [a])          : (len([v]) >  0) 

qualif CmpLen(v:[a], xs:[b])  : (len([v]) =  len([xs])) 
qualif CmpLen(v:[a], xs:[b])  : (len([v]) >= len([xs])) 
qualif CmpLen(v:[a], xs:[b])  : (len([v]) >  len([xs])) 
qualif CmpLen(v:[a], xs:[b])  : (len([v]) <= len([xs])) 
qualif CmpLen(v:[a], xs:[b])  : (len([v]) <  len([xs])) 

qualif EqLen(v:int, xs: [a])  : (v = len([xs])) 
qualif LenEq(v:[a], x: int)   : (x = len([v])) 
qualif LenDiff(v:[a], x:int)  : (len([v]) = x + 1)
qualif LenDiff(v:[a], x:int)  : (len([v]) = x - 1)
qualif LenAcc(v:int, xs:[a], n: int): (v = len([xs]) + n)


qualif CmpZ(v:a)      : (v <  0)
qualif CmpZ(v:a)      : (v <= 0)
qualif CmpZ(v:a)      : (v >  0)
qualif CmpZ(v:a)      : (v >= 0)
qualif CmpZ(v:a)      : (v  = 0)
qualif CmpZ(v:a)      : (v != 0)

qualif Cmp(v:a, x:a)  : (v <  x)
qualif Cmp(v:a, x:a)  : (v <= x)
qualif Cmp(v:a, x:a)  : (v >  x)
qualif Cmp(v:a, x:a)  : (v >= x)
qualif Cmp(v:a, x:a)  : (v  = x)
qualif Cmp(v:a, x:a)  : (v != x)

// qualif CmpZ(v:a)        : v [ < ; <= ; > ; >= ; = ; != ] 0
// qualif Cmp(v:a,x:a)     : v [ < ; <= ; > ; >= ; = ; != ] x
// qualif Cmp(v:int,x:int) : v [ < ; <= ; > ; >= ; = ; != ] x

qualif One(v:int)     : v = 1
qualif True1(v:GHC.Types.Bool)   : (Prop(v))
qualif False1(v:GHC.Types.Bool)  : (~ Prop(v))

constant papp1 : func(1, [Pred @(0); @(0); bool])
qualif Papp(v:a,p:Pred a) : (papp1(p, v))


constant papp2 : func(4, [Pred @(0) @(1); @(2); @(3); bool])
qualif Papp2(v:a,x:b,p:Pred a b) : (papp2(p, v, x))

qualif Papp3(v:a,x:b, y:c, p:Pred a b c) : (papp3(p, v, x, y))
constant papp3 : func(6, [Pred @(0) @(1) @(2); @(3); @(4); @(5); bool])

// qualif Papp4(v:a,x:b, y:c, z:d, p:Pred a b c d) : papp4(p, v, x, y, z)
constant papp4 : func(8, [Pred @(0) @(1) @(2) @(6); @(3); @(4); @(5); @(7); bool])


constant Prop : func(0, [GHC.Types.Bool; bool])
constant runFun : func(2, [Arrow @(0) @(1); @(0); @(1)])
